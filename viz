def visualize_node_graph(node_name):
    if node_name not in graph_data:
        print(f"Node '{node_name}' not found in graph data.")
        return
    
    node_graph_data = graph_data[node_name]
    
    # Create a directed graph
    G = nx.DiGraph()
    
    # Keep track of containers that are on the node
    containers_on_node = set()
    for node in node_graph_data['nodes']:
        containers_on_node.add(node['id'])
    
    # Add nodes with attributes from node_graph_data['nodes']
    for node in node_graph_data['nodes']:
        G.add_node(
            node['id'],
            label=node['label'],
            criticality=node['criticality'],
            description=node['description'],
            on_node=True  # Indicate that this container is on the node
        )
    
    # Add edges and ensure that all nodes in edges are added to the graph with default attributes if missing
    for edge in node_graph_data['edges']:
        # Add edge
        G.add_edge(edge['from'], edge['to'])
        
        # Ensure source node has attributes
        if edge['from'] not in G.nodes:
            G.add_node(
                edge['from'],
                label=edge['from'],
                criticality='unknown',
                description='',
                on_node=False  # External dependency
            )
        else:
            # If the node already exists, ensure 'on_node' attribute is set
            G.nodes[edge['from']].setdefault('on_node', edge['from'] in containers_on_node)
        
        # Ensure target node has attributes
        if edge['to'] not in G.nodes:
            G.add_node(
                edge['to'],
                label=edge['to'],
                criticality='unknown',
                description='',
                on_node=False  # External dependency
            )
        else:
            # If the node already exists, ensure 'on_node' attribute is set
            G.nodes[edge['to']].setdefault('on_node', edge['to'] in containers_on_node)
    
    # Define node colors based on criticality and whether they are on the node
    criticality_colors = {
        'high': 'red',
        'medium': 'orange',
        'low': 'green',
        'unknown': 'gray'
    }
    
    # Assign colors to nodes
    node_colors = []
    for node_id in G.nodes():
        node_data = G.nodes[node_id]
        if not node_data.get('on_node', False):
            color = 'blue'  # External dependency
        else:
            criticality = node_data.get('criticality', 'unknown')
            color = criticality_colors.get(criticality, 'gray')
        node_colors.append(color)
    
    # Generate positions for nodes
    pos = nx.spring_layout(G, k=0.5, seed=42)
    
    # Draw the graph
    plt.figure(figsize=(12, 8))
    nx.draw_networkx_nodes(G, pos, node_color=node_colors, node_size=500)
    nx.draw_networkx_edges(G, pos, arrows=True, arrowstyle='->')
    nx.draw_networkx_labels(
        G, pos, labels={node_id: G.nodes[node_id].get('label', node_id) for node_id in G.nodes()}, font_size=8
    )
    
    # Add legend
    from matplotlib.patches import Patch
    legend_elements = [
        Patch(facecolor='red', edgecolor='black', label='High Criticality'),
        Patch(facecolor='orange', edgecolor='black', label='Medium Criticality'),
        Patch(facecolor='green', edgecolor='black', label='Low Criticality'),
        Patch(facecolor='gray', edgecolor='black', label='Unknown Criticality'),
        Patch(facecolor='blue', edgecolor='black', label='External Dependency')
    ]
    plt.legend(handles=legend_elements, loc='upper right')
    
    plt.title(f"Dependency Graph for Node: {node_name}")
    plt.axis('off')
    plt.show()
