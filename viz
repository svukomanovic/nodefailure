import json
import os
import pandas as pd
import networkx as nx
import matplotlib.pyplot as plt

def load_container_info():
    """Load container information from container_info.json."""
    if not os.path.exists('container_info.json'):
        print("container_info.json not found. Please ensure the file exists in the current directory.")
        return None
    with open('container_info.json') as f:
        return json.load(f)

def extract_containers(container_info):
    """Extract containers and their dependencies from the container_info data."""
    containers = []
    for namespace, containers_dict in container_info.items():
        for container_name, info in containers_dict.items():
            containers.append({
                'namespace': namespace,
                'container_name': container_name,
                'description': info.get('description', 'No description available'),
                'dependencies': info.get('dependencies', []),
                'criticality': info.get('criticality', 'unknown')
            })
    return containers

def visualize_dependencies(containers):
    """Generate and visualize the dependency graph."""
    # Convert to DataFrame
    df = pd.DataFrame(containers)

    # Create a full name for each container
    df['container_full_name'] = df['namespace'] + '/' + df['container_name']

    # Initialize a directed graph
    G = nx.DiGraph()

    # Add nodes for each container
    for idx, row in df.iterrows():
        G.add_node(row['container_full_name'], criticality=row['criticality'])

    # Add edges based on dependencies
    for idx, row in df.iterrows():
        source = row['container_full_name']
        dependencies = row['dependencies']
        if dependencies:
            for dep in dependencies:
                # Check if the dependency is in the list of containers
                if dep in df['container_full_name'].values:
                    G.add_edge(source, dep)
                else:
                    # Add external dependencies as separate nodes
                    G.add_node(dep, external=True)
                    G.add_edge(source, dep)

    # Define node colors based on criticality
    criticality_colors = {
        'high': 'red',
        'medium': 'orange',
        'low': 'green',
        'unknown': 'gray'
    }

    # Assign colors to nodes
    node_colors = []
    for node in G.nodes(data=True):
        attrs = node[1]
        if attrs.get('external'):
            node_colors.append('blue')  # External dependencies in blue
        else:
            criticality = attrs.get('criticality', 'unknown')
            node_colors.append(criticality_colors.get(criticality, 'gray'))

    # Set figure size
    plt.figure(figsize=(14, 10))

    # Generate positions for nodes
    pos = nx.spring_layout(G, k=0.5, seed=42)

    # Draw nodes
    nx.draw_networkx_nodes(G, pos, node_color=node_colors, node_size=500)

    # Draw edges
    nx.draw_networkx_edges(G, pos, arrows=True, arrowstyle='->')

    # Draw labels
    nx.draw_networkx_labels(G, pos, font_size=8)

    # Show plot
    plt.title('Container Dependency Graph')
    plt.axis('off')
    plt.show()

    # Save the Matplotlib figure
    output_filename = "container_dependency_graph.png"
    plt.savefig(output_filename, dpi=300, bbox_inches='tight')
    print(f"Graph saved as '{output_filename}'")

def main():
    container_info = load_container_info()
    if container_info is None:
        return

    containers = extract_containers(container_info)
    if not containers:
        print("No containers found in container_info.json.")
        return

    visualize_dependencies(containers)

if __name__ == '__main__':
    main()
